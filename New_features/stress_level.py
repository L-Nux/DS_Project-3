# -*- coding: utf-8 -*-
"""Stress_level.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Yr7Tp1oauqIZJsKcROIJstXNL0I2rfr2
"""

pip install covid19dh #for getting covid data

import requests #api requests
import json #format of responses
import numpy as np
import pandas as pd
from covid19dh import covid19
from datetime import date
import io #inout-otput

#create arrays
departure = ['Essen', 'Heidelberg', 'Aachen', 'Bochum', 'Wuppertal', 'Würzburg',
       'Hagen', 'Erfurt', 'Solingen', 'Gelsenkirchen', 'Berlin',
       'Karlsruhe', 'Hamburg', 'Darmstadt', 'Dortmund', 'Stuttgart',
       'Nürnberg', 'München', 'Düsseldorf', 'Ulm, Germany', 'Köln', 'Mannheim',
       'Leipzig', 'Bonn', 'Oberhausen', 'Duisburg']
destination = ['Gelsenkirchen', 'Oberhausen', 'Bonn', 'Duisburg', 'München',
       'Bochum', 'Solingen', 'Nürnberg', 'Karlsruhe', 'Wuppertal',
       'Hagen', 'Dortmund', 'Düsseldorf', 'Essen', 'Erlangen',
       'Osnabrück', 'Leipzig', 'Würzburg', 'Mannheim', 'Ulm', 'Bamberg',
       'Darmstadt', 'Köln', 'Stuttgart', 'Heidelberg', 'Erfurt', 'Berlin',
       'Aachen', 'Hamburg']
departure.sort()
destination.sort()

#compare the cases per month
start_date, src = covid19("DEU", level = 3, start = date(2021,11,10), end = date(2021,11,10), verbose = False) #define for estimations the dates, get data from installed python package
end_date, src = covid19("DEU", level = 3, start = date(2021,12,10), end = date(2021,12,10), verbose = False)#define end date

df_start = pd.DataFrame()
df_end = pd.DataFrame()
#drop unnesessary columns
columns_to_drop = ['id', 'date', 'tests', 'deaths', 'recovered',
                      'vaccines', 'people_vaccinated',
                      'hosp', 'icu',	'vent',	'school_closing', 'workplace_closing', 
                      'cancel_events', 'gatherings_restrictions', 'transport_closing', 
                      'stay_home_restrictions', 'internal_movement_restrictions', 
                      'international_movement_restrictions', 'information_campaigns', 
                      'testing_policy', 'contact_tracing', 'facial_coverings', 'vaccination_policy', 
                      'elderly_people_protection', 'government_response_index', 
                      'stringency_index', 'containment_health_index', 'economic_support_index', 
                      'administrative_area_level', 'administrative_area_level_1', 'administrative_area_level_2', 
                      'latitude', 'longitude', 'population', 'iso_alpha_3', 
                      'iso_alpha_2', 'iso_numeric', 'iso_currency', 'key_local', 'key_google_mobility', 
                      'key_apple_mobility', 'key_jhu_csse', 'key_nuts', 'key_gadm']
for city in destination:
  df_start = df_start.append(start_date[start_date['administrative_area_level_3'].str.contains(city)])#create 1st dataframe and add the tons from adm level3 which contains a city from the destination
  df_end = df_end.append(end_date[end_date['administrative_area_level_3'].str.contains(city)])#create 2d dataframe with the same logic
df_start = df_start.drop(columns=columns_to_drop) #drop the redundant columns above
df_end = df_end.drop(columns=columns_to_drop)

df_temp_start = pd.DataFrame()#create temporal dataframe
df_temp_end = pd.DataFrame()
df_finish_start = pd.DataFrame([], columns = ['City', 'Confirmed Start Date'])#empty dataframe with the cities+confirmed start covid cases
df_finish_end = pd.DataFrame([], columns = ['Confirmed End Date'])# end date of the month wrt to covid cases

for city in destination:
  df_temp_start = df_start[df_start['administrative_area_level_3'].str.contains(city)]#add start covid statistics based on installed covid library
  df_temp_end = df_end[df_end['administrative_area_level_3'].str.contains(city)]#add end of month stats

  df_temp_start.set_index('administrative_area_level_3', inplace=True)#create indexes
  df_temp_end.set_index('administrative_area_level_3', inplace=True)

  df_finish_start = df_finish_start.append({'City': city, 'Confirmed Start Date': sum(df_temp_start['confirmed'])}, ignore_index=True)#add to the datatset per each city the sum of confirmed cases
  df_finish_end = df_finish_end.append({'Confirmed End Date': sum(df_temp_end['confirmed'])}, ignore_index=True)

# number of confirmed cases per city
df_finish = pd.concat([df_finish_start, df_finish_end], axis=1)#join 2 dataframes
df_finish['Difference'] = df_finish['Confirmed End Date'] - df_finish['Confirmed Start Date'] #difference per month
df_finish['Confirmed per day'] = df_finish['Difference'] / 28 #difference per day (divide by 28 for further alignment with the range of levels)
df_finish

# upload metacitysize.csv to add population column
from google.colab import files
uploaded = files.upload()

metacitysize = io.BytesIO(uploaded['metacitysize.csv'])  #align with population
population_df = pd.read_csv(metacitysize)
population_df = population_df.sort_values(by=['city'], ascending=True)
population_df = population_df[['population_total']]
population_df.reset_index(drop=True, inplace=True)

df_finish = pd.concat([df_finish, population_df], axis=1)
df_finish

#calculate daily cases per 100 000 inhabitants (average on 28 days)
df_finish['Confirmed per 100000'] = df_finish['Confirmed per day'] / df_finish['population_total'] * 100000
df_finish

"""calculate the Stress Level of a traveler based on Travel health notice thresholds -Incidence Rate (new cases over past 28 days per 100,000 population): https://www.cdc.gov/coronavirus/2019-ncov/travelers/how-level-is-determined.html

CDC reviews case data reported to the World Health Organization to determine a destination’s COVID-19 THN level.

Levels:

3-High-100-500

2-Moderate-50-99

1-Low-fewer than 50

Align level of stress per level

"""

#add a new column 'stress level' to new dataset:
df_finish['stresslevel'] = "null"
df_finish

#populate the dataframe based on condition (covid level in a town):

for i in range(0, len(df_finish)): #iterate
  if df_finish ["Confirmed per 100000"].values[i] < 50:
    df_finish['stresslevel'][i] = "low"
  elif df_finish ["Confirmed per 100000"].values[i] >= 50 and df_finish ["Confirmed per 100000"].values[i] < 100:
    df_finish['stresslevel'][i] = "moderate"
  elif df_finish ["Confirmed per 100000"].values[i] >= 100:
    df_finish['stresslevel'][i] = "high"

#check dataframe
df_finish

#save dataset for further usage in common one
from google.colab import files
df_finish.to_csv('stressfinal.csv') 
files.download('stressfinal.csv')

#load common dataset without new feature
file='allfeatures.csv'
nn= pd.read_csv(file)
print(nn.describe())

#add a new column 'stress level' to common:
nn['stresslevel'] = "null"
nn

#try final alignment with 2 data sets
for i in range(0, len(nn)): #iterate
  for j in range(0, len(df_finish)):
    if nn ["targetname"].values[i] == df_finish ["City"].values[j]:
      nn['stresslevel'].values[i] = df_finish ["stresslevel"].values[j]

#check if we obtain the correct cities for moderate stress

nn.loc[nn['stresslevel'] == 'moderate']

"""to go to Munchen, Mannheim-moderate stress level"""

#check if we obtain the correct stress level for a concrete town

nn.loc[nn['targetname'] == 'Bamberg']

"""to go to Bamberg-stress level of the passenger would be high"""

#save dataset for further usage in common one
from google.colab import files
nn.to_csv('alldata.csv') 
files.download('alldata.csv')