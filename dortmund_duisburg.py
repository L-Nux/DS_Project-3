# -*- coding: utf-8 -*-
"""Untitled35.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15_O7vtpuRakIph-cn9srYgGOZiehHDJl
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline 
#to include graphs next to the code
#useful libraries
import numpy as np #linear algebra
import math
import pandas as pd #data processing
import matplotlib.pyplot as plt #plotting
import seaborn as sns #visualization

#this only works if the csv file is in the same folder as the jupyter notebook
file='11_15_Dortmund_Duisburg_trimmed.csv'
data1 = pd.read_csv(file)


#get the overview of the data


print(data1.describe()) #statistics

print(data1.head(10)) #return first 10 rows in the data frame

print(data1.info())

#column to drop: unnamed: we do not need it for our further analysis (check the meaning with Thomas?
data_valid = data1.iloc[: , 1:]

print(data_valid.info())

#for the sake of exploratory analysis have an idea to explore frequency of the proposed solutions
from wordcloud import WordCloud
#join each element of the column name in our dataset
txt =" ".join(str(each) for each in data_valid.finalSolutionUsedLabels)
# create and generate a word cloud image, set a max range of words-top 2
name_wordcloud = WordCloud(max_words=2, background_color="black").generate(txt)
plt.figure(figsize=(15,10))
#display the generated image:
#nn bilinear interpolation, a linear interpolation is first performed between pixels in the horizontal (X) direction of the image and then in the Y direction (or vice-versa)
plt.imshow(name_wordcloud,interpolation='bilinear')
plt.axis("off")
plt.title('Frequent combinations',size = 25) #set the figure size
plt.show()
#draw a conclusion about the frequency 
#as we can see, the most proposed mode of travel is land-based and includes bus or rail transportation

#categorize the unique values for solutions

print(data_valid.finalSolutionUsedLabels.astype('category')) #cast the objects
#7 unique combinations were revealed

#check which column contains missing values and the percentage
#iterate through columns (11) of our Data set
for col in data_valid.columns:
    prct = np.mean(data1[col].isnull()) #get the ratio using np.mean function
    print('{}:{}%'.format(col, round(prct*100)))

    #clearly, we do not have missing values in the prepared data file

#have a look at the total price distribution
sns.set(color_codes=True) #change how matplotlib color shorthands are interpreted
plt.figure(figsize=(10,10)) #set the size
sns.distplot(data_valid['totalPrice'], color='g')

#the price distribution is not normally distributed
#can conclude that the majority of prices have value between 7,5 and 9 euros

#Skewness-a measure of how much a distribution leans to the left or to the right
#checked that travel time is positively skewed 
#meaning of that: mode> median> mean in the distribution
print('Skewness: {}'.format(data_valid['totalTravelTimeInSec'].skew())) #format the text

#Kurtosis-a measure of thickness of the tails of a distribution
#high Kurtosis value means extreme high and low values as outliers
#from not high Kurtosis value we can conclude that our data does not have extreme outliers
print('Kurtosis: {}'.format(data_valid['totalTravelTimeInSec'].kurt()))

#get the pairplot to understand the a relationship between two variables 
#determine the color for different mode choices in general
sns.pairplot(data_valid,vars=['totalTravelTimeInSec','totalPrice','totalNumberOfChanges','totalWalkingDistance', 'totalWaitingTime'],hue='finalSolutionUsedLabels')

#short conclusion: total price is the highest for car option, customer has to have more transfers combinin railway and bus as well as using just a bus,
#have to walk more having car and flixbus